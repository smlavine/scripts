#!/bin/sh
# Copyright (c) 2021 Sebastian LaVine <mail@smlavine.com>
# SPDX-License-Identifier: MPL-2.0
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
# mykill
#	Provide a menu to select and kill a process.

# Prints help information from the script's comment header.
print_help()
{
	< "$0" awk '
		/^#$/ {
			getline  # skip the /^#$/ line
			# loop until empty line
			while (length) {
				sub(/^# ?/, "")
				print
				getline
			}
			exit
		}
	'
}

options='h'
while getopts "$options" o; do
	case "$o" in
		h) print_help; exit ;;
		*) print_help >&2; exit 1 ;;
	esac
done

shift $((OPTIND - 1))

if [ "$#" -ne 0 ]; then
	echo "$0: illegal arguments provided" >&2
	print_help >&2
	exit 1
fi

# File to hold a list of processes to be chosen from.
procs="$(mktemp)"

# File to hold the list of options presented to the user. Its contents
# are updated each time the user selects a page.
menu="$(mktemp)"

# The maximum amount of processes to show on each page of the menu.
pagemax=15

# The maximum length of each line. Longer lines will be truncated.
linemax=70

# The line number of "$procs" that is the start of the current page.
menustart=1

ps x --no-headers --sort -%mem o pid,args |
	awk -v linemax="$linemax" '{
		print (length > linemax) ? substr($0, 1, linemax - 1) "â€¦" : $0
	}' > "$procs"

while true; do
	sed -n "$menustart,$((menustart + pagemax - 1))p" "$procs" > "$menu"
	printf '*Next*\n*Previous*\n*Cancel*\n' >> "$menu"

	pid="$(dmenu -i -c -l 30 -fn 'monospace:size=20' \
		-sb 'dark blue' -p 'Which one?' < "$menu" |
		awk '{ print $1 }')"

	case "$pid" in
		'*Next*') menustart=$((menustart + pagemax)) ;;
		'*Previous*')
			menustart=$((menustart - pagemax))
			test "$menustart" -lt 1 && menustart=1
			;;
		'*Cancel*' | '') break ;;
		*)  # A process was selected.
			name="$(ps x o pid,comm | awk -v pid="$pid" \
				'$1 == pid { print $2 }')"
			choice="$(printf 'Yes.\nNo.\n' | dmenu -i -c -l 2 \
				-fn 'monospace:size=40' -sb 'dark blue' \
				-p "Kill $name?")"

			if [ "$choice" = 'Yes.' ]; then
				kill "$pid"
				break
			else
				continue
			fi
			;;
	esac
done

rm "$procs" "$menu"  # Cleanup temporary files
