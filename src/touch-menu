#!/bin/sh
# Copyright (c) 2021 Sebastian LaVine <mail@smlavine.com>
# Licensed under the GPLv3. See GPLv3.txt for details.
#
# File:        touch-menu
# Description: Provide a menu to perform common activites without needing to
#              input commands with a keyboard. This is useful in mouse-only
#              environments, such as when the keyboard is unavailable in a
#              laptop with tablet capabilities like the Thinkpad X220 Tablet.

change_brightness()
{
	while true; do
		# This will display the current brightness level
		# before any choice is made by the user.
		# shellcheck disable=SC2086
		mylight $args
		args="$(dmenu -c -i -l 7 -fn 'monospace:size=50' <<- EOF
		-A 5
		-U 5
		-A 1
		-U 1
		-S 100
		-S 2
		*Done*
		EOF
		)"
		[ "$args" = '*Done*' ] || [ "$args" = '' ] && break
	done
}

quit_a_program()
{
	ps --sort +etime o pid,tty,etime,args |
		dmenu -i -c -l 30 -sb 'dark blue' -p 'Which one?' |
		awk '{ print $1 }' |
		xargs kill
}

rotate_screen()
{
	if [ "$#" -ne 0 ]; then
		way="$1"
		shift
	else
		way="$(dmenu -c -i -l 6 \
			-fn 'monospace:size=50' -p 'Which way?' |
			tr '[:upper:]' '[:lower:]')"
	fi

	if [ "$way" = 'toggle' ]; then
		# Rotate the screen to be the opposite of how it currently is
		# oriented. If it is oriented normal, rotate it inverted;
		# if inverted, normal; if left, right; if right, left.

		current="$(xrandr | grep ' connected' | cut -d' ' -f5)"

		# This xrandr field is either 'left', 'right', or 'inverted'.
		# In normal orientation, nothing is in this field, so the next
		# field, '(normal', is collected.
		case "$current" in
			left)     rotate_screen 'right'    ;;
			right)    rotate_screen 'left'     ;;
			inverted) rotate_screen 'normal'   ;;
			*)        rotate_screen 'inverted' ;;
		esac

		exit 0 # Don't continue with function; called recursively above
	fi

	case "$way" in
		left)     matrix="0 -1 1 1 0 0 0 0 1"  ;;
		right)    matrix="0 1 0 -1 0 1 0 0 1"  ;;
		inverted) matrix="-1 0 1 0 -1 1 0 0 1" ;;
		normal)   matrix="1 0 0 0 1 0 0 0 1"   ;;
		*) exit 1 ;;
	esac

	xrandr -o "$way" || exit $?

	# TODO: fix issue where the transformation matrix is not changed if
	# the pen or eraser have not yet had contact with the screen during
	# this session.
	# Without this command, the touch screen inputs do not match up with
	# the new orientation of the screen.
	# shellcheck disable=SC2086
	xinput --set-prop 'Wacom ISDv4 E6 Pen Pen (0)' \
		'Coordinate Transformation Matrix' $matrix
	# shellcheck disable=SC2086
	xinput --set-prop 'Wacom ISDv4 E6 Pen Eraser (0)' \
		'Coordinate Transformation Matrix' $matrix
}

main()
{
	if [ "$#" -ne 0 ]; then
		item="$1"
		shift
	else
		item="$(dmenu -c -i -l 20 -fn 'monospace:size=50' \
			-p 'What to do?')"
	fi

	[ "$item" = "*Cancel*" ] && exit 0
	case "$item" in
		'Rotate Screen')
			rotate_screen "$@" <<- EOF
			Left
			Right
			Inverted
			Normal
			Toggle
			*Cancel*
			EOF
			;;
		'Change Brightness')
			change_brightness
			;;
		'Quit a Program')
			quit_a_program
			;;
		*)
			# Execute the item as a shell command. There are
			# deliberately no quotes here to parse options and
			# arguments properly.
			$item
			;;
	esac
}

main "$@" << EOF
Rotate Screen
xournalpp
svkbd-en
Change Brightness
pavucontrol
Quit a Program
*Cancel*
EOF
